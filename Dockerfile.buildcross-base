FROM ubuntu:22.04

LABEL maintainer="Your Name <your.email@example.com>"
LABEL description="Base image for buildcross cross-compiler toolchains"

# Avoid prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Set timezone to UTC
RUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime

# Install common build dependencies and tools
RUN apt-get update && apt-get install -y \
    build-essential \
    bison \
    flex \
    git \
    wget \
    curl \
    texinfo \
    help2man \
    gawk \
    libtool-bin \
    autoconf \
    automake \
    libgmp-dev \
    libmpfr-dev \
    libmpc-dev \
    libexpat1-dev \
    zlib1g-dev \
    python3 \
    python-is-python3 \
    ninja-build \
    rsync \
    pkg-config \
    libncurses-dev \
    libisl-dev \
    file \
    cmake \
    unzip \
    gettext \
    libssl-dev \
    ca-certificates \
    xz-utils \
    less \
    vim \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Add 32-bit support for architectures that need it
RUN dpkg --add-architecture i386 \
    && apt-get update \
    && apt-get install -y \
        libc6:i386 \
        libstdc++6:i386 \
        libncurses5:i386 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create directories for buildcross
RUN mkdir -p /opt/buildcross/downloads \
             /opt/buildcross/sources \
             /opt/buildcross/host-tools

# Download common components to avoid repetitive downloads
ENV BUILDCROSS_DOWNLOADS="/opt/buildcross/downloads"
ENV BUILDCROSS_SOURCES="/opt/buildcross/sources"
ENV BUILDCROSS_HOST_TOOLS="/opt/buildcross/host-tools"
WORKDIR /opt/buildcross/downloads

# Download GMP, MPFR, and MPC - these are required for all targets
# RUN wget -q https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.xz \
#     && wget -q https://ftpmirror.gnu.org/mpfr/mpfr-4.2.1.tar.xz \
#     && wget -q https://ftpmirror.gnu.org/mpc/mpc-1.3.1.tar.gz

# # Clone common repositories
# RUN git clone https://github.com/gcc-mirror/gcc.git gcc-mirror-gcc
# RUN git clone https://github.com/mikpe/binutils-gdb.git mikpe-binutils-gdb 
# RUN git clone https://github.com/torvalds/linux.git torvalds-linux 
# RUN git clone https://github.com/mikpe/gcc-generated-files.git mikpe-gcc-generated-files

# Add script directory
RUN mkdir -p /opt/buildcross/scripts
COPY architectures/buildcross.sh /opt/buildcross/scripts/
RUN chmod +x /opt/buildcross/scripts/buildcross.sh

# Dryrun with downloads to get sources
RUN /opt/buildcross/scripts/buildcross.sh --downloads-dir=${BUILDCROSS_DOWNLOADS} \
--sources-dir=${BUILDCROSS_SOURCES} --host-tools-dir=${BUILDCROSS_HOST_TOOLS} --download-only X86_64
RUN /opt/buildcross/scripts/buildcross.sh --downloads-dir=${BUILDCROSS_DOWNLOADS} \
--sources-dir=${BUILDCROSS_SOURCES} --host-tools-dir=${BUILDCROSS_HOST_TOOLS} --download-only moxie

# Add library compile scripts
COPY scripts/build-lib.sh /usr/local/bin/build-lib
COPY scripts/download-libs.sh /usr/local/bin/download-libs
RUN chmod +x /usr/local/bin/build-lib /usr/local/bin/download-libs

# Set up environment variables

# Create a helper script to easily run buildcross with the right paths
RUN echo '#!/bin/bash\n\
/opt/buildcross/scripts/buildcross.sh --downloads-dir=${BUILDCROSS_DOWNLOADS} \
--sources-dir=${BUILDCROSS_SOURCES} --host-tools-dir=${BUILDCROSS_HOST_TOOLS} "$@"' > /usr/local/bin/build.sh \
&& chmod +x /usr/local/bin/build.sh

# Create workspace volumes for later use
RUN mkdir -p /workspace/sources /workspace/output
VOLUME ["/opt/buildcross/downloads", "/workspace/sources", "/workspace/output"]

# Set up welcome message for bash
RUN echo 'echo "Welcome to Buildcross Docker environment!"' >> /root/.bashrc \
    && echo 'echo ""' >> /root/.bashrc \
    && echo 'echo "To build a cross-compiler, use:"' >> /root/.bashrc \
    && echo 'echo "  build.sh [options] <TARGET>"' >> /root/.bashrc \
    && echo 'echo ""' >> /root/.bashrc \
    && echo 'echo "The compiler will be in: ./<TARGET>"' >> /root/.bashrc \
    && echo 'echo "Workspace directories for your source files: /workspace/sources and /workspace/output"' >> /root/.bashrc \
    && echo 'echo ""' >> /root/.bashrc

# Start in the root directory where builds are typically run
WORKDIR /

CMD ["/bin/bash"]