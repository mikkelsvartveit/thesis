This thesis investigates the application of Convolutional Neural Networks (CNNs) for detecting instruction set features from the binary code of a computer program, without explicit feature engineering. While prior research have focused on classifying the entire Instruction Set Architecture (ISA) of a binary file, we shift focus to detecting individual architectural properties that can generalize across unknown or undocumented instruction sets. We train and evaluate six CNN architectures of varying complexity on detecting endianness and fixed/variable instruction width, comparing simple models against deeper networks, one-dimensional versus two-dimensional convolutions, and models with and without embedding layers.

Using rigorous evaluation methods including Leave-One-Group-Out Cross-Validation (LOGO CV) and cross-dataset testing, we demonstrate that small CNN models with embedding layers can detect endianness with up to 90.3% accuracy and fixed/variable instruction width with up to 88.0% accuracy on unseen architectures within the ISAdetect dataset. However, we observe significant performance degradation when evaluating on more diverse datasets, with accuracy for unseen architectures dropping below 75% for both target features. This indicates generalization challenges when models encounter truly novel architectures.

We introduce BuildCross, a new dataset containing binary code from 40 different ISAs with associated cross-compilation framework. Combining BuildCross with ISAdetect for training improves fixed/variable instruction width detection on the CpuRec dataset from approximately 55% to over 80%, demonstrating that architectural diversity in training data is important for generalization.

Our results show that while CNNs can detect key ISA features from raw binary code with performance comparable to methods using manual feature engineering, their generalization capabilities are heavily dependent on training data diversity. This research contributes to advancing software reverse engineering capabilities, particularly for analyzing binaries from unknown or undocumented instruction set architectures.
